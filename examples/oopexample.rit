Point :: BaseType
  x = Integer
  y = Integer
  ::: Integer x, Integer y
    $.x = x
    $.y = y

  toString->String:
    -> "[" + x + "," + y + "]"

Shape :: BaseType
  //area = Float
  //perimeter = Float

  //  At present, abstract functions are not implemented. (lol)
  //	Boolean: contains Point point


Rectangle :: Shape
  topLeftHand = Point
  width =	Integer
  height = Integer

  area -> Integer:
    -> width * height

  contains -> Boolean:  Point point
    -> (topLeftHand.x <=  point.x) && (topLeftHand.x + width >= point.x) && (topLeftHand.y >= point.y && topLeftHand.y - height <= point.y)

Circle :: Shape
	center = Point
	radius = Integer

	::: Point center, Integer radius
	  $.center = center
	  $.radius = radius

	area -> Float:
		-> 3.141592 * radius ^^ 2

	circumference -> Float:
		-> 2 * 3.141592 * radius




#myRect = Rectangle
myRect.width = 50
myRect.height = 26
myRect.topLeftHand = Point 0-15, 10
print "My rectangle's area is " + (myRect area)

#myPoint = Point 10, 5
(myRect contains myPoint) if
  print "myRect DOES contain point " + (myPoint toString)
? else
  print "myRect does NOT contain point " + (myPoint toString)
myPoint.y += 10
(myRect contains myPoint) if
  print "myRect DOES contain point " + (myPoint toString)
? else
  print "myRect does NOT contain point " + (myPoint toString)


print ""
#myCircle = Circle (Point 1, 1), 5
print "myCircle's radius " + myCircle.radius + " and is centered around " + (myPoint toString)
print "myCircle's area is: " + (myCircle area)
print "myCircle's circumference is: " + (myCircle circumference)





