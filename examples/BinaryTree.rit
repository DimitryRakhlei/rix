Node :: BaseType
  value = int
  left = Node
  right = Node
  
  ::: int v
    value = v
  
  : printPreOrder
    $ == 0 if
      ->
    print value
    left printPreOrder
    right printPreOrder
    
  : printInOrder
    $ == 0 if
      ->
    left printInOrder
    print value
    right printInOrder
    
  : printPostOrder
    $ == 0 if
      ->
    left printPostOrder
    right printPostOrder
    print value
  
  : add int x
    x < value if
      left == 0 if
        left = Node x
      ? else
        left add x
    ? elif x > value
      right == 0 if
        right = Node x
      ? else
        right add x
    x == value if
      print "Entry already exists"


a = Node 3
a add 2
a add 7
a add 6
a add 8

a printPreOrder

print "-----"

a printInOrder

print "-----"

a printPostOrder
